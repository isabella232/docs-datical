---
title: Using Datical DB for PCF
owner: Partners
---

This topic describes how to use Datical DB for PCF.

##<a id='overview'></a>Overview
After Datical DB for PCF is installed and configured, the primary method for managing the databases supporting PCF data services is 
with the Datical command-line called Hammer. 

Hammer is a command-line Datical DB interface that provides two modes of operation:

* An immediate mode
* REPL (Read-Evaluate-Print Loop). 

This topic describes the commands and options available.
For more information, see www.support.datical.com.

##<a id='immediate'></a>Immediate Mode Syntax

The basic syntax when running hammer in immediate mode is:
<pre class='code'>hammer [option]… [command] [JVM args]…</pre>

##<a id='repl'></a>REPL

To start the REPL, run hammer with no arguments. When in the REPL, the prompt shows the current directory. If the current 
directory contains a Datical DB project, the prompt indicates that as well.
<pre class='code'>Datical DB datical>pwd
/home/steve/datical
Datical DB datical>cd MyNewPlan
Datical DB [MyNewPlan]> </pre>

The basic syntax when in the REPL is a command followed by its options.
In this document, required arguments are indicated with uppercase variables like this: <code>REQUIRED-ARGUMENT</code> and optional 
arguments are indicated with variables in square brackets like this: <code>OPTIONAL-ARGUMENT]</code>.

##<a id='command-options'></a>Command Options

Many of the options are generally applicable to many commands. The options have both a short form and a long form – for example, the 
long form of the assignContexts option is <code>--assignContexts</code>, but this can be shortened to <code>-ac</code>. 

To get help on general options, run this command:
<pre>hammer help options</pre>

This command shows the following output:

<pre class='terminal'>
usage: hammer [-ac &lt;arg&gt;] [-al &lt;arg&gt;] [-amf &lt;arg&gt;] [-aml &lt;arg&gt;] [-c &lt;arg&gt;] [-D
       &lt;property=value&gt;] [-d &lt;arg&gt;] [-e &lt;arg&gt;] [-el &lt;arg&gt;] [-f] [-fo &lt;arg&gt;] [-g]
       [-gr] [-i &lt;arg&gt;] [-iv &lt;arg&gt;] [-j &lt;arg&gt;] [-l &lt;arg&gt;] [-lb &lt;arg&gt;] [-lc
       &lt;arg&gt;] [-lcs &lt;arg&gt;] [-ma &lt;arg&gt;] [-ml &lt;arg&gt;] [-np] [-o &lt;arg&gt;] [-os] [-p
       &lt;arg&gt;] [-pl &lt;arg&gt;] [-ps &lt;arg&gt;] [-pw &lt;databaseName:::password&gt;] [-q &lt;arg&gt;]
       [-r &lt;arg&gt;] [-sc &lt;arg&gt;] [-ssl &lt;arg&gt;] [-un &lt;databaseName:::username&gt;] [-v]
 -ac,--assignContexts &lt;arg&gt;         Assign the given contexts to changesets
                                    generated by diffChangelog command.  Accepts
                                    a complex context expression.
                                    default: null
 -al,--assignLabels &lt;arg&gt;           Assign the given labels to changesets
                                    generated by diffChangelog command. Accepts
                                    a comma separated list of labels.
                                    default: null
 -amf,--metadataFile &lt;arg&gt;          Assign metadata file name.
 -aml,--metadataLabel &lt;arg&gt;         Label name for assign metadata.
 -c,--context &lt;arg&gt;                 Context to use for operation
                                    default:  &lt;all contexts&gt;
 -D &lt;property=value>                Set a Java system property
 -d,--deployThreshold &lt;arg&gt;         Deployment threshold setting
                                    default: stopOnError
                                    stopOnError | stopOnWarn | alwaysDeploy
 -e,--externalStoredLogic &lt;arg&gt;     External stored logic setting
                                    default:  true
                                    true or false
 -el,--ddlExcludeList &lt;arg&gt;         List of stored logic objects to exclude from
                                    snapshot
 -f,--force                         When used with deploy, forces deploy even if
                                    not all operations can be rolled back.
                                    When used with versionChangeLog, forces XML
                                    header validation
                                    default:  &lt;off&gt;When used with
                                    setRuntimeCredentials, do not alert when
                                    setting toggled
                                    default:  &lt;off&gt;
 -fo,--format &lt;arg&gt;                 Format of the database snapshot. One of
                                    dbobject | changelog
                                    default: dbobject
 -g,--genSQL                        Generate SQL for changes
                                    default:  &lt;off&gt;
 -gr,--genRollbackSQL               Generate rollback SQL for changes
                                    default:  &lt;off&gt;
 -i,--includeStorageOptions &lt;arg&gt;   Include storage options
                                    default:  false
                                    true | false
 -iv,--invalidsCheck &lt;arg&gt;          Stored Logic validity check setting
                                    default: disabled
                                    disabled | local | global
 -j,--drivers &lt;arg&gt;                 Driver jars or directory containing jars.
 -l,--log &lt;arg&gt;                     Log file directory
                                    default: &lt;project directory&gt;/Logs
 -lb,--labels &lt;arg&gt;                 Label to use for operation
                                    default:  &lt;all labels&gt;
 -lc,--lookupChangesets &lt;arg&gt;       Label expression to use for change set
                                    lookup
 -lcs,--limit &lt;arg&gt;                 controls the number of Change Sets listed in
                                    each section of the statusDetails output
 -ma,--matchAll &lt;arg&gt;               All script checksums must match for change
                                    set lookup
 -ml,--mergeLabels &lt;arg&gt;            Label merge strategy
 -np,--noPrompt                     Do not prompt for input.
 -o,--output &lt;arg&gt;                  Output file or directory for snapshot
                                    default: &lt;project directory&gt;/Snapshots
 -os,--onlySQL                      Generate rollback SQL for changes (no
                                    deployment)
                                    default:  &lt;off&gt;
 -p,--project &lt;arg&gt;                 Project directory
                                    default:  &lt;current working directory&gt;
 -pl,--pipeline &lt;arg&gt;               Pipeline name to use for deploy,
                                    changelogSync, and rollback commands
 -ps,--persistSnapshots &lt;arg&gt;       Persist snapshots of live databases during
                                    diff
 -pw &lt;databaseName:::password>      Database password when the project has the
                                    Specify database credentials at operation
                                    run time option set.
 -q,--quiet &lt;arg&gt;                   Direct output to debug log only
 -r,--report &lt;arg&gt;                  Report file directory
                                    default:  &lt;project directory&gt;/Reports
 -sc,--scriptChecksum &lt;arg&gt;         Script checksum to use for
                                    addLabels/removeLabels command
 -ssl,--snapshotSchemaList &lt;arg&gt;    List of schemas for snapshot
 -un &lt;databaseName:::username&gt;      Database username when the project has the
                                    Specify database credentials at operation
                                    run time option set.
 -v,--version                       print version info. 
</pre>

 
##<a id='commands'></a>Commands

Command Summary
To get a list of available commands, run the help command:
<pre class='terminal'>
USAGE: hammer [OPTION]... [COMMAND] [JVM ARGS]...
Use help options for available options.
Use help [COMMAND] for more help on a command.
hammer with no arguments enters a Datical DB shell.

AVAILABLE COMMANDS:
      add-to-property: Add a path to a property.
          addContexts: Add contexts to change sets.
            addLabels: Add labels to change sets.
       assignMetadata: Assign metadata information to a label.
                   cd: Change to the given directory.
        changelogSync: Mark all changes as executed in the database.
           checkRules: Compiles rules and reports any errors.
         checkdrivers: Check that JDBC driver jars are installed or on the specified paths.
       clearCheckSums: Delete the checksums used to detect altered change sets from the tracking tables.
               dbshow: List all databases for a project, along with extra info about each.
               deploy: Deploy the changelog, updating the target databases schema to the latest version.
  deploy-autoRollback: Deploy the changelog to the target database; if an error occurs, rollback to the revision before the command was given.
                 diff: Compares two databases and produces a report.
        diffChangelog: Compares two databases and produces a changelog.
                 exit: Exit Datical DB.
       findChangeSets: Locates change sets based on label expression and script checksum
             forecast: Simulate unexecuted change sets against the specified database.
               groovy: Run a script that can use Datical DB REPL commands using the Groovy script engine.
                 help: Print help on available commands.
              history: Show the applied change set history of a database.
 insertSavedAuditData: Insert all audit entries temporarily saved in the project into the user-configured Audit DB.
       installDrivers: Run the custom script installDrivers.groovy.
       installLicense: Install a license file to allow continued use of Datical DB.
                   ls: List the files in the current directory.
                  pwd: Print current directory.
       removeContexts: Remove contexts from change sets.
         removeLabels: Remove labels from change sets.
             rollback: Roll the target database back to a previous state, using a variety of methods.
          schemaStats: Display summary schema info.
                  set: Set properties, database definitions, etc. See set help for more information and sub commands.
                 show: Display project properties, database definitions, etc. See show help for more information and sub commands.
             snapshot: Captures a snapshot of a database as either a persistent object file or as a Liquibase changelog.
               status: Show the deployment status of a database.
        statusDetails: Show detailed status for each of the ChangeSets in the ChangeLog.
          testConnect: Test the connection for one or more databases.
     uninstallDrivers: Run the custom script uninstallDrivers.groovy.
  validateStoredLogic: Compiles stored logic and reports any validation errors.
     versionChangeLog: Upgrades project changelog to the current version.
 </pre>

For detail on each Command, including usage and examples, please refer to Datical DB - User Guide - CLI v4.23 at https://software.datical.com/.
