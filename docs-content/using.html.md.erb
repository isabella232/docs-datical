---
title: Using Datical DB for PCF
owner: Partners
---

This topic describes how to use Datical DB for PCF.

##<a id='using'></a> Using Datical DB for PCF

###<a id='overview'></a>Overview

After Datical DB for PCF is installed and configured, the primary method for managing the databases supporting PCF data services is 
with the Datical command-line called Hammer. Hammer is a command-line Datical DB interface that provides two modes of operation – 
an immediate mode and a REPL (Read-Evaluate-Print Loop). This document describes the commands and options available. Further 
documentation on working with Datical DB is available at www.support.datical.com.

The basic syntax when running hammer in immediate mode is:
hammer [option]… [command] [JVM args]…

To start the REPL, just run hammer with no arguments. When in the REPL, the prompt will show the current directory. If the current 
directory contains a Datical DB project, the prompt will indicate that as well
Datical DB datical>pwd
/home/steve/datical
Datical DB datical>cd MyNewPlan
Datical DB [MyNewPlan]> 

The basic syntax when in the REPL is a command followed by its options.
In this document, required arguments are indicated with angle brackets like this: <required argument> and optional arguments are 
indicated with square brackets like this: [optional argument].

###<a id='command-options'></a>Command Options

Many of the options are generally applicable to many commands. The options have both a short form and a long form – for example, the 
long form of the assignContexts option is --assignContexts, but this can be shortened to -ac. 
To get help on general options, run this command:
hammer help options
This command shows the following output:
usage: hammer [-ac <arg>] [-al <arg>] [-amf <arg>] [-aml <arg>] [-c <arg>] [-D
       <property=value>] [-d <arg>] [-e <arg>] [-el <arg>] [-f] [-fo <arg>] [-g]
       [-gr] [-i <arg>] [-iv <arg>] [-j <arg>] [-l <arg>] [-lb <arg>] [-lc
       <arg>] [-lcs <arg>] [-ma <arg>] [-ml <arg>] [-np] [-o <arg>] [-os] [-p
       <arg>] [-pl <arg>] [-ps <arg>] [-pw <databaseName:::password>] [-q <arg>]
       [-r <arg>] [-sc <arg>] [-ssl <arg>] [-un <databaseName:::username>] [-v]
 -ac,--assignContexts <arg>         Assign the given contexts to changesets
                                    generated by diffChangelog command.  Accepts
                                    a complex context expression.
                                    default: null
 -al,--assignLabels <arg>           Assign the given labels to changesets
                                    generated by diffChangelog command. Accepts
                                    a comma separated list of labels.
                                    default: null
 -amf,--metadataFile <arg>          Assign metadata file name.
 -aml,--metadataLabel <arg>         Label name for assign metadata.
 -c,--context <arg>                 Context to use for operation
                                    default:  <all contexts>
 -D <property=value>                Set a Java system property
 -d,--deployThreshold <arg>         Deployment threshold setting
                                    default: stopOnError
                                    stopOnError | stopOnWarn | alwaysDeploy
 -e,--externalStoredLogic <arg>     External stored logic setting
                                    default:  true
                                    true or false
 -el,--ddlExcludeList <arg>         List of stored logic objects to exclude from
                                    snapshot
 -f,--force                         When used with deploy, forces deploy even if
                                    not all operations can be rolled back.
                                    When used with versionChangeLog, forces XML
                                    header validation
                                    default:  <off>When used with
                                    setRuntimeCredentials, do not alert when
                                    setting toggled
                                    default:  <off>
 -fo,--format <arg>                 Format of the database snapshot. One of
                                    dbobject | changelog
                                    default: dbobject
 -g,--genSQL                        Generate SQL for changes
                                    default:  <off>
 -gr,--genRollbackSQL               Generate rollback SQL for changes
                                    default:  <off>
 -i,--includeStorageOptions <arg>   Include storage options
                                    default:  false
                                    true | false
 -iv,--invalidsCheck <arg>          Stored Logic validity check setting
                                    default: disabled
                                    disabled | local | global
 -j,--drivers <arg>                 Driver jars or directory containing jars.
 -l,--log <arg>                     Log file directory
                                    default: <project directory>/Logs
 -lb,--labels <arg>                 Label to use for operation
                                    default:  <all labels>
 -lc,--lookupChangesets <arg>       Label expression to use for change set
                                    lookup
 -lcs,--limit <arg>                 controls the number of Change Sets listed in
                                    each section of the statusDetails output
 -ma,--matchAll <arg>               All script checksums must match for change
                                    set lookup
 -ml,--mergeLabels <arg>            Label merge strategy
 -np,--noPrompt                     Do not prompt for input.
 -o,--output <arg>                  Output file or directory for snapshot
                                    default: <project directory>/Snapshots
 -os,--onlySQL                      Generate rollback SQL for changes (no
                                    deployment)
                                    default:  <off>
 -p,--project <arg>                 Project directory
                                    default:  <current working directory>
 -pl,--pipeline <arg>               Pipeline name to use for deploy,
                                    changelogSync, and rollback commands
 -ps,--persistSnapshots <arg>       Persist snapshots of live databases during
                                    diff
 -pw <databaseName:::password>      Database password when the project has the
                                    Specify database credentials at operation
                                    run time option set.
 -q,--quiet <arg>                   Direct output to debug log only
 -r,--report <arg>                  Report file directory
                                    default:  <project directory>/Reports
 -sc,--scriptChecksum <arg>         Script checksum to use for
                                    addLabels/removeLabels command
 -ssl,--snapshotSchemaList <arg>    List of schemas for snapshot
 -un <databaseName:::username>      Database username when the project has the
                                    Specify database credentials at operation
                                    run time option set.
 -v,--version                       print version info. 
 
###<a id='commands'></a>Commands

Command Summary
To get a list of available commands, run the help command:
USAGE: hammer [OPTION]... [COMMAND] [JVM ARGS]...
Use help options for available options.
Use help [COMMAND] for more help on a command.
hammer with no arguments enters a Datical DB shell.

AVAILABLE COMMANDS:
      add-to-property: Add a path to a property.
          addContexts: Add contexts to change sets.
            addLabels: Add labels to change sets.
       assignMetadata: Assign metadata information to a label.
                   cd: Change to the given directory.
        changelogSync: Mark all changes as executed in the database.
           checkRules: Compiles rules and reports any errors.
         checkdrivers: Check that JDBC driver jars are installed or on the specified paths.
       clearCheckSums: Delete the checksums used to detect altered change sets from the tracking tables.
               dbshow: List all databases for a project, along with extra info about each.
               deploy: Deploy the changelog, updating the target databases schema to the latest version.
  deploy-autoRollback: Deploy the changelog to the target database; if an error occurs, rollback to the revision before the command was given.
                 diff: Compares two databases and produces a report.
        diffChangelog: Compares two databases and produces a changelog.
                 exit: Exit Datical DB.
       findChangeSets: Locates change sets based on label expression and script checksum
             forecast: Simulate unexecuted change sets against the specified database.
               groovy: Run a script that can use Datical DB REPL commands using the Groovy script engine.
                 help: Print help on available commands.
              history: Show the applied change set history of a database.
 insertSavedAuditData: Insert all audit entries temporarily saved in the project into the user-configured Audit DB.
       installDrivers: Run the custom script installDrivers.groovy.
       installLicense: Install a license file to allow continued use of Datical DB.
                   ls: List the files in the current directory.
                  pwd: Print current directory.
       removeContexts: Remove contexts from change sets.
         removeLabels: Remove labels from change sets.
             rollback: Roll the target database back to a previous state, using a variety of methods.
          schemaStats: Display summary schema info.
                  set: Set properties, database definitions, etc. See set help for more information and sub commands.
                 show: Display project properties, database definitions, etc. See show help for more information and sub commands.
             snapshot: Captures a snapshot of a database as either a persistent object file or as a Liquibase changelog.
               status: Show the deployment status of a database.
        statusDetails: Show detailed status for each of the ChangeSets in the ChangeLog.
          testConnect: Test the connection for one or more databases.
     uninstallDrivers: Run the custom script uninstallDrivers.groovy.
  validateStoredLogic: Compiles stored logic and reports any validation errors.
     versionChangeLog: Upgrades project changelog to the current version.
 
<i>add-to-property</i>
Add a path to a property
USAGE: add-to-property <path property> <new path>
EXAMPLE: add-to-property drivers /home/user/newdrivers
NOTES: 
•	This command is specifically for appending a new path to an existing property that expects path values.

<i>addContexts</i>
Adds context attributes to a set of changesets in the changelog that are selected using a label expression. This command is used by 
the deploy packager to indicate that a group of changesets is ready to be deployed to a new environment. 
USAGE: addContexts --lookupChangesets=<label expression> --context=<comma separated list of contexts to add> --scriptChecksum=<SQL script checksum value> --matchAll=<true/false>
Options:
  lookupChangesets	- Label expression used to match the change sets (required)
  context		- Comma-separated list of contexts (required)
  scriptChecksum	- SQL script checksum value
  matchAll		- SQL Script checksums must match for change set lookup. Default value is true
NOTES:
•	The value of the scriptChecksum parameter can be used to further qualify change sets that match the label expression.
This is used primarily in the Deployment Packager to confirm that the change set was generated by the expected version of a script.
•	The value of the matchAll parameter impacts the matching behavior of the scriptChecksum parameter. If matchAll is true, all change sets 
identified by the label expression must have a scriptChecksum attribute that matches the attribute passed on the command line. If 
matchAll is false, only one change set returned by the label expression needs to have a matching scriptChecksum attribute.

<i>addLabels</i>
Adds label attributes to a set of changesets in the changelog that are selected using a label expression.
USAGE: addLabels --lookupChangesets=<label expression> --labels=<comma separated list of labels to add> --scriptChecksum=<SQL script checksum value> --matchAll=<true/false>
Options:
  lookupChangesets	- Label expression used to match the change sets (required)
  labels			- Comma-separated list of labels (required)
  scriptChecksum	- SQL script checksum value
  matchAll		- SQL Script checksums must match for change set lookup. Default value is true
NOTES:
•	The value of the scriptChecksum parameter can be used to further qualify change sets that match the label expression.
This is used primarily in the Deployment Packager to confirm that the change set was generated by the expected version of a script.
•	The value of the matchAll parameter impacts the matching behavior of the scriptChecksum parameter. If matchAll is true, all change sets 
identified by the label expression must have a scriptChecksum attribute that matches the attribute passed on the command line. If 
matchAll is false, only one change set returned by the label expression needs to have a matching scriptChecksum attribute.

<i>assignMetadata</i>
Assign metadata information to a label. Used to associate more information with a label than could be expressed in the label itself.
The metadata is stored in the project’s associated audit database, so this command requires that an audit database has been configured 
for the project.
USAGE:  assignMetadata --metdataLabel=<label name> --metadataFile=<path to file>
Options:
  metadataLabel - Name of the label
  metadataFile  - Path to a properties file containing the metadata key-value pairs

<i>cd</i>
Change to the given directory.
USAGE: cd <path>
EXAMPLES:
•	WINDOWS: cd C:\\Users\\dev\\datical OR cd C:/Users/dev/datical
•	LINUX: cd /home/dev/datical
NOTES:
•	When specifying a fully qualified path in Windows, you must include the drive letter.
•	When specifying the path on Windows systems the path separator can either be / or \\.
•	On Linux systems the path separator is / only.
•	This command is only useful in REPL mode, not in immediate execution mode.

<i>changelogSync</i>
Marks all change sets as having been applied to the specified database.
USAGE: changelogSync <dbref>
EXAMPLE: changelogSync myAppDev
NOTES:
•	USE CAUTION!  Before running changelogSync, verify that the specified database is up to date!
•	Running changelogSync against a database that is not complete can lead to future deployment failures.

<i>checkRules</i>
Compiles rules and reports any errors.
USAGE: checkRules [rules folder]
EXAMPLE: checkRules PreForecast 
OPTIONAL ARGUMENTS: 
•	rulesFolder - when specified, this must be one of the three standard sub-folders of the projects Rules folder (PreForecast, Forecast, 
  or PostForecast). If not specified, then all three sets of rules will be compiled.
NOTES: 
•	This command requires that the current directory is a valid Datical DB project directory.

<i>checkdrivers</i>
The checkdrivers command checks that JDBC driver jars are installed or on the specified paths. 
USAGE: checkdrivers
NOTES:
•	There are several ways to configure Datical DB to use the JDBC drivers that communicate with the databases being managed. The 
  preferred method is to install the drivers into the OSGi environment using the installDrivers command. Drivers can also be found 
  by creating a daticaldb.properties file in the project and then either 
1.	manually editing the file 
2.	using the command set property drivers <path-to-drivers>
•	For more information on setting the drivers property, type help set property

<i>clearCheckSums</i>
The clearCheckSums command deletes the checksums used to detect altered change sets from the tracking tables.
USAGE: clearCheckSums <dbref>
EXAMPLE: clearCheckSums myAppDevDB
NOTES:
•	This command is useful when an existing object is changed in the database outside of Datical DB.
•	It allows the user to update the change set that creates all of the objects in the database schema and clear the existing check sums 
  to avoid validation errors.
•	The check sums will be recreated on the next deploy or changeLogSync command.
•	This command should only be used by very experienced users, or under the direction of a Datical Support Engineer.

<i>dbshow</i>
The dbshow command lists the name, URL, database name, alternate schema and default context associated with all or a subset of database 
references in a project.
USAGE: dbshow [ref1] [ref2] [ref3]
EXAMPLE: dbshow DEVDb QADb STAGEDb
NOTES:
•	If the command is passed without parameters, information will be displayed for all database references in a project.
•	To obtain information on a subset of database references, include the names of those database references as command line parameters.

<i>deploy</i>
The deploy command deploys all change sets that have not been applied to the indicated database reference in the project.
USAGE: deploy <dbref> [--log=/path/to/log] [--report=/path/to/report]
       [--context=context1,context2] [--labels=<label expression>]
EXAMPLE: deploy myAppDevDb --log=/home/user/daticallogs/ 
          --report=/home/user/daticalreports --context=dev,integration
          --labels="JUN AND (poolApp or beachApp)"
OPTIONAL PARAMETERS: 
•	--log - When set, the daticaldb.log file will be written to the directory specified.  Log is written to Logs directory of project by 
  default. 
•	--report - When set, deploy report will be written to the directory specified. Report is written to the Reports directory by default.
•	--context - When set, only change sets marked with the contexts specified will be executed.  To run all contexts, specify $all.
•	–labels – When set, only change sets marked with the label expression will be executed.  To run all labels, specify $all.

<i>deploy-autoRollBack</i>
Deploy to the target database with the latest schema revision; if an error occurs, rollback to the revision before the command was given.
USAGE: deploy-autoRollBack <dbref> [--log=/path/to/log] [--report=/path/to/report] 
       [--context=context1,context2] [--labels=<label expression>] [--force]
EXAMPLE: deploy-autoRollBack myAppDevDb --log=/home/user/daticallogs/ 
          --report=/home/user/daticalreports --context=dev,integration
          --labels="JUN AND (poolApp or beachApp)"
OPTIONAL PARAMETERS:
•	--log - When set, the daticaldb.log file will be written to the directory specified.  Log is written to Logs directory of project by 
  default.
•	--report - When set, deploy report will be written to the directory specified.  Report is written to the Reports directory by default.
•	--context - When set, only change sets marked with the contexts specified will be executed.  To run all contexts, specify $all.
•	–labels – When set, only change sets marked with the label expression will be executed.  To run all labels, specify $all.
•	--force - When set, deployOrAutoRollback will attempt the update even if Datical DB detects change sets that cannot be rolled back.  
  USE CAUTION!

<i>diff</i>
The diff command compares two database references in a project and produces a text report of the differences.
USAGE: diff <referenceDB> <targetDb> [--output=/path/to/report]
EXAMPLE: diff myAppDevDB myAppQaDB --output=/home/user/diffReports/diffReport.txt
OPTIONAL PARAMETERS:
•	--output - When present, the report generated by this command will be written to the specified file.  If no output is specified, 
  the report will be written to STDOUT
NOTES:
•	The referenceDB is the database that represents the state the user wants to reach.
•	The targetDB is the database that is out of synchronization and needs to be caught up to the state of the referenceDB.

diffChangelog
The diffChangelog command compares two database references in a project and produces the change sets necessary to synchronize the databases.
USAGE: diffChangelog <referenceDB> <targetDb> [--output=<path>]
        [--assignLabels=<labels>] [--assignContexts=<contexts>] [--genSQL]
EXAMPLE: myAppDevDB myAppQaDB 
         --output=/home/user/diffChangeLogsdir/diffChangeLog.xml
         --assignLabels=label1,label2 --assignContexts="(contextOne and contextTwo)"
         --genSQL
OPTIONAL PARAMETERS:
•	--output - When present, the change log generated by this command will be written to the specified file. The value should end with an 
  .xml file extension. If no output is specified this file is written to the Report/DiffChangeLogs directory of the project.
•	--assignLabels   - All the change sets created by the command will have this set of labels applied. Accepts a comma separated list of 
  labels.
•	--assignContexts - All the change sets created by the command will have this set of contexts applied. Accepts a complex context 
  expression.
•	–genSQL -  Generate a SQL file that corresponds to the changeset that gets created. The SQL file will have the same name as the 
  changelog but will end in “.sql”.
NOTES:
•	The referenceDB is the database that represents the state the user wants to reach.
•	The targetDB is the database that is out of synchronization and needs to be caught up to the state of the referenceDB.

<i>exit</i>
Exits the REPL command line.

<i>forecast</i>
Simulate unexecuted change sets against the specified database.
USAGE: forecast <dbref> [--log=/path/to/log] [--report=/path/to/report]
       [--context=context1,context2] [--labels=<label expression>]
EXAMPLE: forecast myAppDevDb --log=/home/user/logs/ --report=/home/user/reports
          --context=dev,qa --labels="JUN AND (poolApp or beachApp)"
OPTIONAL PARAMETERS:
•	--log - Location to write the daticaldb.log file. Log is written to Logs directory of project by default.
•	--report - Location to write the forecast report. Report is written to the Reports directory by default.
•	--context - Only change sets marked with the contexts specified will be executed.  To run all contexts, specify $all.
•	–labels – When set, only change sets marked with the label expression will be executed.  To run all labels, specify $all.

<i>groovy</i>
Allows the execution of a groovy file.
USAGE: groovy <script.groovy> <optional arguments to script>
EXAMPLES: groovy myScript.groovy
ARGUMENTS:
1.	Optional arguments - Any arguments you want to pass to your script
NOTES:
1.	To access the REPL commands through the script, access them through the DaticalDb object. The parameters for a command are 
    (project, List<String> <[parameters]>). Use the word "project" as shown below.
2.	add-to-property is accessed by addToProperty and deploy-autoRollback is accessed by deployOrAutoRollback.
EXAMPLES:
1.	DaticalDB.help(project, [])
2.	DaticalDB.help(project, ["groovy"])
3.	DaticalDB.show(project, ["dbprop", "myProject", "enableStorageOptions"])

<i>help</i>
Print help on available commands.
USAGE: help OR help <command_name>
EXAMPLE: help diff
OPTIONAL ARGUMENTS: 
•	command_name - Name of the REPL command you wouldd like to learn about.
NOTES: 
•	When executed without an argument, all available commands are listed with a brief description.

<i>history</i>
Show the change set execution history for the specified DbDef. 
DEPRECATED – use the statusDetails command for more detailed information.
USAGE: history <DbDef_Name>
EXAMPLE: history MyAppQA
ARGUMENTS: 
•	DbDef_Name - Name of a DbDef from the current project.

<i>insertSavedAuditData</i>
Insert all audit entries temporarily saved in the project into the user-configured Audit DB.
There may be times when an operation (such as a deploy) is performed, but there is some condition that prevents audit information 
from being written to the project’s configured audit database. In that case, Datical DB will save the information that would be written
to the audit database into a temporary on-disk database. This command can be used to migrate the on-disk data to the configured audit 
database once connectivity to the audit database has been restored.
USAGE:   insertSavedAuditData --project=<path to project>
  	OR
  	    insertSavedAuditData
OPTIONAL PARAMETERS: 
  --project - Path to the project for which you would like to insert all saved Audit DB entries.
NOTE: 
•	If invoked without an argument the command will attempt to execute in the current directory.

installDrivers
Install OSGi packaged JDBC drivers from the provided update site for use by the Datical DB REPL.
USAGE: hammer installDrivers <driver_update_site>
EXAMPLE: hammer installDrivers http://update.datical.com/drivers/updates/
NOTES:
•	Update sites can be either http URLs as shown above, or can be files or directories on a local or network file system.
•	Refer to the examples below to reference a local update site:

Composite Archive (Windows and Linux examples):
                  jar:file:/C:/Users/Pete/DaticalDBCompositeRepo-3.75.2255.zip!/
                  jar:file:/home/Pete/DaticalDBCompositeRepo-3.75.2255.zip\!/
Extracted Archive (Windows and Linux examples):
               file:/C:/Users/Pete/DaticalDBCompositeRepo-3.75.2255/
               file:/home/Pete/DaticalDBCompositeRepo-3.75.2255/

<i>installLicense</i>
Install a license file to allow continued use of Datical DB.
USAGE: installLicense <path_to_license>
EXAMPLE: installLicense /home/datical/datdb.lic
ARGUMENTS: 
•	path_to_license - File system path to the Datical DB product license.
NOTES: 
•	If you need to obtain or renew a license please contact support@datical.com.

<i>ls</i>
List files and directories in the current directory.
USAGE: ls

<i>pwd</i>
Show the current directory.
USAGE: pwd

<i>rollback</i>
Roll the target database back to a given revision, date or by number of steps.
USAGE:
rollback <dbdef> lastlabel
rollback <dbdef> changeid:<change_set_identifier> 
rollback <dbdef> count:<number_of_changesets>
rollback <dbdef> date:<date>
rollback <dbdef> tag:<tag_name>
rollback <dbdef> lastDeploy
MODES:
•	lastlabel - this will roll back the database to remove all changes associated with the last label deployed. Certain preconditions 
  must be met for this mode to succeed.
•	changeid - Rollback to a specific change set in the change log.
•	count - Rollback the last n change sets.
•	date - Rollback all change sets applied after the specified date.
•	tag - Rollback to the specified tag if one has been specified in a previous change set.
•	lastDeploy – this will roll back the database to remove all changes associated with the last deploy. This feature was added in 
  version 3.85 so any deploys prior to that version are exempt from this option.
ARGUMENTS:
•	dbdef - Name of a DbDef in the current project.
•	change_set_identifier - The author and id of a change set. Format: "id=createTable1,author=Datical User"
•	number_of_changesets - Number of change sets to revert.
•	date - Date boundary used to determine which change sets will be reverted.  Format: yyyy-MM-dd
•	tag - Datical tag name to which you wish to rollback. Requires that you tag the database in a previous change set.

<i>schemaStats</i>
Display summary info about the database model represented by the changelog.
USAGE: schemaStats

<i>set</i>
Set properties, database definitions, etc. Usage of the set command requires a subcommand and then one or more arguments. 
Most of the set commands have corresponding show commands.
AVAILABLE SUBCOMMANDS:
  alternateSchema - Set the alternate schema for the project.
  USAGE: set alternateSchema <schema name>

  autoGenSQL – control whether or not SQL scripts are automatically generated during Forecast, Deploy, and Rollback operations.
  USAGE: set autoGenSQL <true|false>

  dbprop - Set a database property in a project.
  USAGE: set dbprop [DbRef] [propertyName] [propertyValue]

  DbRef - the name of a database ref in the current project.
  propertyName - a property name. The only property currently supported is ‘enableStorageOptions’.  This property controls whether or 
  not storage options are collected for a specific Database Reference during the snapshot command.  Storage Option information includes 
  storage configuration, tablespace/filegroup assignments, large object storage parameters and partitioning information for tables and 
  indexes.  This defaults to false.
  propertyValue - a property value (must be valid for the type of the property).
  EXAMPLE: set dbProp MyDbRef enableStorageOptions true

  deployMode – controls how much work is done during Deploy operations.
  USAGE: set deployMode <quick|full>
  The full deployMode performs rules validation and Forecast before deploying the changes, while the quick mode only deploys the changes.

  deployThreshold – controls what happens when a full deploy detects errors or warnings in rules or in forecast.
  USAGE: set deployThrehold <stopOnError | stopOnWarn | deployAlways>
  stopOnError - Deployment will not be performed when errors are present in Pre-Deployment validation
  stopOnWarn - Deployment will not be performed when errors and/or Warnings are present in Pre-Deployment validation

  deployAlways - Deploy will occur regardless of validation results. NOT RECOMMENDED
  externalStoredLogic - Set whether stored logic definitions (stored procedures, etc.) are stored in external files or within the 
  project changelog.
  USAGE: set externalStoredLogic <true|false>

  forecastDML – Controls whether Datical DB attempts to forecast DML (Data Modifcation Language) changes.
  USAGE: set forecastDML <true | false>
  When set to true, forecast operations that include a DML change will predict whether that change will be successful or not. When set 
  to false, forecast operations will report a warning that the change will not be forecast. 

  invalidsCheck – controls how Datical DB checks the validity of stored logic after deploy.
  USAGE: set invalidsCheck <disabled | local | global>
  disabled - Deployment will not perform the Stored Logic Validity Check.
  local - Deployment will perform the Stored Logic Validity Check on the target schema only.
  global - Deployment will perform the Stored Logic Validity Check on all schema in the database.

  limitForecast – Controls how Datical DB behaves during forecast operations. This command allows you to speed up Forecast operations 
  by limiting object profiling to the objects impacted by the operation.
  USAGE:  set limitForecast <true|false>
  Options:
    true  - Limit object profiling to those directly impacted by this forecast
    false - Profile all objects in the target database 

  property - Sets the specified property to a given value. 
  USAGE: set property [propertyName] [propertyValue]
  The only property currently supported is ‘drivers.’  This points to the directory where you’ve stored your JDBC drivers.
  EXAMPLE: set property drivers /path/to/driver/dir

  requireOptions – controls whether or not labels or contexts are required for Forecast and Deploy operations.
  USAGE:  set requireOptions <true | false>

  runtimeCredentials – running this command switches the project setting ‘runtimeCredentails’ to the provided value. In addition, each 
  of the database connections specified in the project will also be converted to either have credentials stored in the project file, or 
  to a setting where each operation that requires a connection to a database specify the connection credentials. When this setting is 
  true, database connection credentials can be supplied in several different ways – interactively from the GUI or command line, 
  supplied on the command line as arguments, or specified using environment variables. 
  USAGE: set runtimeCredentials <true | false>
  The set command also supports showing additional help for the sub-commands.
  USAGE: set help <subcommand>

<i>show</i>
Display project properties, database definitions, etc. Most of the show commands have corresponding set commands.
AVAILABLE SUBCOMMANDS:
  autoGenSQL – show whether the project will automatically generate SQL when performing a deploy operation. 
	USAGE: show autoGenSQL
  Bundles – lists the OSGi bundles that are included in the REPL runtime environment, along with their state. Used by Datical support to 
  help diagnose problems. 
	USAGE: show autoGenSQL
  
  databases - This command lists all the databases that are in the project.
  USAGE: show databases
  
  dbprop - Show a database property in a project.
  USAGE: show dbprop [DbRef] [propertyName]

  DbRef - the name of a database ref in the current project.

  propertyName - a property name. Currently the only propertyName allowed is enableStorageOptions.

  deployMode
  USAGE: show autoGenSQL

  deployThreshold
  USAGE: show autoGenSQL

  enableRowCount
  USAGE: show autoGenSQL

  externalStoredLogic - The show externalStoredLogic command shows the externalStoredLogic setting for the project.
  USAGE: show externalStoredLogic

  invalidsCheck
  USAGE: show autoGenSQL

  languages - This command lists all the scripting languages that are supported by the java runtime.
  USAGE: show languages

  license - This command will show the status of the licenses.
  USAGE: show license

  project - This command shows the name and description of the current project.
  USAGE: show project

  properties - This command shows all the properties that have been set.
  USAGE: show properties

  property - This command will show the value of the given propertyname.
  USAGE: show property [propertyName]

  requireOptions
	USAGE: show autoGenSQL

  runtimeCredentials
	USAGE: show autoGenSQL

  version - This command will show version information for the different components that make up the product.
  USAGE: show version
         
<i>snapshot</i>
Captures a snapshot of a database as either a persistent object file or as a Liquibase changelog.
USAGE: snapshot deploymentStep> [--output=/path/to/snapshot/dir]
EXAMPLE: snapshot myAppDevDB  --output=/home/user/snapshots/
  OPTIONAL PARAMETERS:
  •	--output - When present, the change log generated by this command will be written to the specified directory. If no output is 
    specified this file is written to the Snapshots directory of the project.
  NOTES:
  •	If the current project is set to externalize stored logic, that stored logic will be written to a Resources directory within the 
    date stamped directory created by the snapshot process.

<i>status</i>
Show the deployment status of a database.
USAGE: status [DbRef]
EXAMPLE: status myDbRef
  OPTIONAL PARAMETERS:
  •	DbRef – The name of the Database Reference for which the status should be determined
NOTES:
•	If provided without an argument, status information will be displayed for all Database References in the Deployment Plan.  
  Alternatively, the user can specify a single Database Reference for which they would like status information.

<i>statusDetails</i>
The ‘statusDetails’ command will display a breakdown of the execution status of every Change Set in the Change Log for the Database 
Reference specified. Change Sets are broken into three categories: Deployed, Undeployed, Ignored.
USAGE: statusDetails <DbRef>
EXAMPLE: statusDetails MyDBRef

<i>testConnect</i>
The testConnect command tests the database connection for one or more databases.
USAGE: testConnect <DbRef>
EXAMPLE: testConnect MyDBRef

<i>uninstallDrivers</i>
         
<i>uninstallLicense</i>
Uninstalls the Datical DB Product License
USAGE: uninstallLicense

<i>validateStoredLogic</i>
Compiles stored logic and reports any validation errors.
USAGE: validateStoredLogic <dbref> 
EXAMPLE: validateStoredLogic <dbref> 
         
<i>versionChangeLog</i>
Upgrades project changelog to the current version.
USAGE: versionChangeLog
EXAMPLE: versionChangeLog
NOTES:
•	This command requires that the current directory is a valid Datical DB project directory.
•	This command can only be used to UPGRADE the Change Log version.  Downgrading the version is not supported.

<i>create</i>
Create various project artifacts. 
AVAILABLE SUBCOMMANDS:
  DbDef
  Creates a new DbDef in the current project based on key/value pairs in a json template.
            USAGE: create DbDef <json_file>
  EXAMPLE: create DbDef OracleDev.json
  ARGUMENTS: json_file - Path to a JSON file that holds key/value pairs that define the DbDef.
  EXAMPLE OF JSON FILE:
  {
   "DbDefClass":"OracleDbDef",
   "name":"MyNewOracleDB",
   "hostname":"127.0.0.1",
   "port":"1521",
   "username":"orclUser",
   "password":"s3kritPassw0rd",
   "sid":"ORCLSID",
   "contexts":"DEV,QA"
  }
AVAILABLE KEYS FOR JSON FILE:
  1.	DbDefClass - Database Type. Valid values are (OracleDbDef|Db2DbDef|MysqlDbDef|SqlServerDbDef|PostgresqlDbDef)
  2.	name - The name for the dbDef.  Used in the REPL and UI as an alias for this connection.
  3.	hostname - The hostname/IP Address of the target database server.
  4.	port - The port number for JDBC connections to the target database server.
  5.	username - The database user name to use for the connection.
  6.	password - The password for the database user specified.
  7.	database - (MySQL|DB2|Postgres) The name of the database you wish to manage.
  8.	databaseName - (SQLServer) The name of the database you wish to manage.
  9.	instanceName - (SQLServer) The name of the instance you wish to manage.
  10.	applicationName - (SQLServer) The name of the database application you wish to manage.
  11.	sid - (Oracle) The name of the Oracle SID to which you wish connect.
  12.	serviceName - (Oracle) The name of the Oracle Service to which you wish connect.
  13.	defaultSchemaName - The name of the schema/catalog you wish to manage.
  14.	contexts - A comma separated list of contexts to associate with the new dbDef.

<i>newDbDef</i>
NOT LISTED IN HELP
Creates a new dbDef based on the key/value pairs specified as arguments.
USAGE: newDbDef DbDefClass <value> name <value> hostname <value> port <value> username <value> password <value> database <value>
AVAILABLE KEYS:
  1.	DbDefClass - Database Type. (OracleDbDef|Db2DbDef|MysqlDbDef|SqlServerDbDef|PostgresqlDbDef)
  2.	name - The name for the dbDef.  Used in the REPL and UI as an alias for this connection.
  3.	hostname - The hostname/ip of the target database server.
  4.	port - The port number for JDBC connections to the target database server.
  5.	username - The database user name to use for the connection.
  6.	password - The password for the database user specified.
  7.	database - (MySQL|DB2|Postgres) The name of the database you wish to manage.
  8.	databaseName - (SQLServer) The name of the database you wish to manage.
  9.	instanceName - (SQLServer) The name of the instance you wish to manage.
  10.	applicationName - (SQLServer) The name of the database application you wish to manage.
  11.	sid - (Oracle) The name of the Oracle SID to which you wish connect.
  12.	serviceName - (Oracle) The name of the Oracle Service to which you wish connect. 
  13.	defaultSchemaName - The name of the schema/catalog you wish to manage.
  14.	contexts - A comma separated list of contexts to associate with the new dbDef.

<i>newProject</i>
NOT LISTED IN HELP
Creates a new empty project in the current directory.
USAGE: newProject [projectName]
EXAMPLE: newProject myNewProject
OPTIONAL ARGUMENTS: 
1.	projectName - When present, the new project will be created with the name specified. Otherwise, the new project will be called 
    newProject.
NOTES:
1.	This command does NOT create a new directory for the project.  The project files are created in the current directory.  It is 
    recommended that the user create a directory for the project and execute this command from that directory.
